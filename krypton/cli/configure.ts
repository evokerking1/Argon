import { createInterface } from 'readline/promises';
import * as yaml from 'js-yaml';
import * as fs from 'fs/promises';
import * as path from 'path';
import { randomBytes } from 'crypto';

// Color formatting functions
const colors = {
  reset: '\x1b[0m',
  bold: '\x1b[1m',
  dim: '\x1b[2m',
  cyan: '\x1b[36m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  red: '\x1b[31m',
  blue: '\x1b[34m'
};

// Helper functions for formatted output
const log = {
  title: (text: string) => console.log(`\n${colors.bold}${colors.blue}${text}${colors.reset}`),
  info: (text: string) => console.log(`${colors.cyan}${text}${colors.reset}`),
  success: (text: string) => console.log(`${colors.green}✓ ${text}${colors.reset}`),
  warning: (text: string) => console.log(`${colors.yellow}⚠ ${text}${colors.reset}`),
  error: (text: string) => console.log(`${colors.red}✗ ${text}${colors.reset}`),
  prompt: (text: string) => console.log(`${colors.bold}${text}${colors.reset}`),
  section: (text: string) => console.log(`\n${colors.dim}${text}${colors.reset}`)
};

async function generateConfig() {
    const rl = createInterface({
        input: process.stdin,
        output: process.stdout
    });

    try {
        // Helper function to get input with default value
        const getInput = async (question: string, defaultValue: string) => {
            const answer = await rl.question(`${colors.cyan}? ${colors.reset}${question} ${colors.dim}[${defaultValue}]${colors.reset}: `);
            return answer.trim() || defaultValue;
        };

        log.title('Krypton Configuration Wizard');
        log.info('Let\'s set up your Krypton instance together.\n');

        // Get panel URL
        const appUrl = await getInput("What's your panel's URL", 'https://panel.example.io');

        // Confirm node setup
        const nodeConfirmed = await getInput("Please confirm that you've made a node that points towards this instance of Krypton", 'y');
        if (nodeConfirmed.toLowerCase() !== 'y') {
            log.error('Please set up a node in your panel before continuing.');
            return false;
        }

        // Get port
        const bindPort = parseInt(await getInput('What port did you choose?', '8080'));

        // Get connection key
        log.section('Security Configuration');
        const apiKey = await rl.question(`${colors.cyan}? ${colors.reset}What's the connection key? ${colors.dim}(Node -> Configure)${colors.reset}: `);
        if (!apiKey.trim()) {
            log.error('Connection key is required.');
            return false;
        }

        // Check for additional CORS origins
        const needsAdditionalCors = await getInput('Will this instance be accessed from anywhere else other than your panel?', 'n');
        
        let corsOrigins = [appUrl];
        if (needsAdditionalCors.toLowerCase() === 'y') {
            log.prompt('\nEnter additional CORS origins (one per line, press Enter twice to finish):');
            let input: string;
            do {
                input = await rl.question(`${colors.dim}> ${colors.reset}`);
                if (input.trim()) {
                    corsOrigins.push(input.trim());
                }
            } while (input.trim());
        }

        // Create config object
        const config = {
            apiKey,
            bindAddress: '0.0.0.0',
            bindPort,
            volumesDirectory: './volumes',
            appUrl,
            corsOrigin: corsOrigins.join(',')
        };

        // Create warning header
        const warningHeader = `# WARNING: AUTOMATICALLY GENERATED CONFIGURATION FILE
# 
# This configuration file was automatically generated by Argon.
# Manual modifications to this file can break your Krypton instance and may result in errors.
#
# Only modify this file if you:
# 1. Fully understand the consequences of your changes
# 2. Have a backup of the original configuration
# 3. Know how to troubleshoot issues that *will* arise if you misconfigure something
#
# For support and documentation, visit the Argon GitHub repository.
#
# Generated on: ${new Date().toISOString()} for Krypton version 1.x
#
`;

        // Display config
        log.section('\nConfiguration Preview');
        console.log(warningHeader + yaml.dump(config));

        // Confirm configuration
        const confirmed = await getInput('Are we all set?', 'y');
        if (confirmed.toLowerCase() !== 'y') {
            log.warning('Starting over...');
            return false;
        }

        // Write config file
        await fs.writeFile(
            path.join(process.cwd(), 'config.yml'),
            warningHeader + yaml.dump(config),
            'utf8'
        );

        log.success('\nConfiguration saved successfully!');
        log.info('\nNext steps:');
        log.prompt('1. Start your Krypton instance:');
        console.log(`   ${colors.dim}$${colors.reset} bun run start`);
        log.prompt('2. For background operation, check our documentation');
        log.section('\nThank you for using Argon!');

        return true;
    } finally {
        rl.close();
    }
}

// Start the configuration process
generateConfig().catch(error => {
    log.error('Error during configuration:');
    console.error(error);
    process.exit(1);
});